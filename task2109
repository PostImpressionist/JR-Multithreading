//task2109;

/* 
Запретить клонирование
*/

public class Solution {
    public static class A implements Cloneable {
        private int i;
        private int j;

        public A(int i, int j) {
            this.i = i;
            this.j = j;
        } // constrictor
        public int getI() {
            return i;
        }
        public int getJ() {
            return j;
        }

        @Override
        protected Object clone() throws CloneNotSupportedException {
            return super.clone();
        }
    }

    public static class B extends A {
        private String name;

        public B(int i, int j, String name) {
            super(i, j);
            this.name = name;
        }

        public String getName() {
            return name;
        }
        @Override
        public Object clone() throws CloneNotSupportedException {
            throw new CloneNotSupportedException();
           // return super.clone();
        }
    }

    public static class C extends B {
        public C(int i, int j, String name) {
            super(i, j, name);
        }

        @Override
        public Object clone() throws CloneNotSupportedException {
            return new C(this.getI(), this.getJ(), this.getName());
        }
    }

    public static void main(String[] args) throws CloneNotSupportedException {
        System.out.println(new A(1,1).clone());
        try{System.out.println(new B(1,1,"e").clone());}
        catch(Exception e){
            System.out.println("ignore e");
        }
        System.out.println(new C(1,1,"23").clone());
    }
}
/*
Запретить клонирование
Разреши клонировать класс А
Запрети клонировать класс B
Разреши клонировать класс C
Не забудь о методах equals и hashCode!


Требования:
+   1. Класс A должен поддерживать интерфейс Cloneable.
+   2. Класс B должен быть потомком класса A.
+   3. При объявлении класса B не должно быть явно указано implements Cloneable.
4. Метод clone в классе B должен быть переопределен таким образом,
        чтобы при попытке клонирования объекта класса B возникало исключение CloneNotSupportedException.
+   5. Класс C должен быть потомком класса B.
6. Клонирование объектов класса C должно завершаться успешно.
 */
